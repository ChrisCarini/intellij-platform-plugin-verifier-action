name: 'IntelliJ Platform Plugin Verifier'
description: 'A GitHub Action for IntelliJ Platform Plugins to verify their compatibility with various JetBrains IDEs.'
branding:
  icon: 'check-square'
  color: 'gray-dark'
inputs:
  verifier-version:
    description: 'The version of verifier-all.jar to download and use for verification.'
    required: true
    # Find the latest version here: https://bintray.com/jetbrains/intellij-plugin-service/intellij-plugin-verifier
    #   and the latest GitHub tagged version here: https://github.com/JetBrains/intellij-plugin-verifier/tags
    #
    # `LATEST` is a special, internal, keyword to signal our script to automatically resolve the latest tagged version
    #   from the GH repo of the intellij-plugin-verifier -> https://github.com/JetBrains/intellij-plugin-verifier/tags
    # This option is presented to people in case they wish to explicitly override the version of the plugin verifier.
    default: 'LATEST'
  plugin-location:
    description: 'The location of the plugin; based from the root directory of your project; ie: `build/distributions/sample-intellij-plugin-*`'
    required: true
    # `build/distributions/*.zip` assumes the plugin is published to the standard location as a zip file.
    default: 'build/distributions/*.zip'
  ide-versions:
    description: 'The list of IDE + version (separated by a `:`) to validate against.'
    required: true
  failure-levels:
    description: 'The list of failure levels you want to set. Any set and found will cause this action to fail.'
    required: true
    # Find all possible values in the docs (README.md).
    #
    # The default is `COMPATIBILITY_PROBLEMS` and `INVALID_PLUGIN` for backwards compatibility. These
    #   were the two default checks as of authoring this input feature. This may change in the future,
    #   but a minor version bump (at a minimum) will happen if/when that occurs.
    default: 'COMPATIBILITY_PROBLEMS INVALID_PLUGIN'
outputs:
  verification-output-log-filename:
    description: The filename of the log file generated from the verification output. The output file contains both `stdout` and `stderr` streams.
runs:
  using: 'docker'
  image: 'Dockerfile'
  args:
    - ${{ inputs.verifier-version }}
    - ${{ inputs.plugin-location }}
    - ${{ inputs.ide-versions }}
    - ${{ inputs.failure-levels }}